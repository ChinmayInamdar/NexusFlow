# src/config.py
import os
import logging
import pandas as pd # For pd.set_option
import numpy as np # For np.nan
import secrets # For generating a strong cookie key

# --- Project Root ---
PROJECT_ROOT = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# --- Logging Setup ---
LOG_FORMAT = '%(asctime)s - %(levelname)s - %(module)s:%(funcName)s:%(lineno)d - %(message)s'
logging.basicConfig(level=logging.INFO, format=LOG_FORMAT, handlers=[logging.StreamHandler()])
logger = logging.getLogger(__name__)

# --- Pandas Display Options ---
pd.set_option('display.max_columns', None)
pd.set_option('display.max_colwidth', None)
pd.set_option('display.width', 1000)

# --- File Paths ---
DATA_DIR_RAW = os.path.join(PROJECT_ROOT, 'data')
UPLOAD_DIR_PATH = os.path.join(DATA_DIR_RAW, "uploads_new") # For 07_File_Upload.py

CUSTOMERS_MESSY_JSON_ORIG_NAME = 'customers_messy_data.json'
PRODUCTS_INCONSISTENT_JSON_ORIG_NAME = 'products_inconsistent_data.json'
ORDERS_UNSTRUCTURED_CSV_ORIG_NAME = 'orders_unstructured_data.csv'
RECONCILIATION_DATA_CSV_ORIG_NAME = 'reconciliation_challenge_data.csv'

CUSTOMERS_MESSY_JSON_ORIG = os.path.join(DATA_DIR_RAW, CUSTOMERS_MESSY_JSON_ORIG_NAME)
PRODUCTS_INCONSISTENT_JSON_ORIG = os.path.join(DATA_DIR_RAW, PRODUCTS_INCONSISTENT_JSON_ORIG_NAME)
ORDERS_UNSTRUCTURED_CSV_ORIG = os.path.join(DATA_DIR_RAW, ORDERS_UNSTRUCTURED_CSV_ORIG_NAME)
RECONCILIATION_DATA_CSV_ORIG = os.path.join(DATA_DIR_RAW, RECONCILIATION_DATA_CSV_ORIG_NAME)

# --- Database ---
DB_NAME = 'unified_ecommerce.db'
DB_PATH = os.path.join(PROJECT_ROOT, DB_NAME)
DB_ENGINE_URL = f'sqlite:///{DB_PATH}'

# --- Streamlit Authenticator Config ---
COOKIE_NAME = "nexusflow_auth_cookie"
# IMPORTANT: Replace with a real, strong, random key generated by: secrets.token_hex(32)
COOKIE_KEY = os.getenv("STREAMLIT_COOKIE_KEY", "your_strong_random_cookie_key_CHANGE_ME") 
COOKIE_EXPIRY_DAYS = 30
PREAUTHORIZED_EMAILS = [] 

# --- ETL Constants ---
DEFAULT_UNKNOWN_CATEGORICAL = 'UNKNOWN'
DEFAULT_UNKNOWN_NUMERIC_INT = 0 
DEFAULT_UNKNOWN_NUMERIC_FLOAT = 0.0
DEFAULT_STATUS_UNKNOWN = 'UNKNOWN'

# --- Standardization Maps ---
GENDER_MAP = {
    'M': 'MALE', 'F': 'FEMALE', 'MALE': 'MALE', 'FEMALE': 'FEMALE', 'O': 'OTHER',
    'OTHER': 'OTHER', '': DEFAULT_UNKNOWN_CATEGORICAL, ' ': DEFAULT_UNKNOWN_CATEGORICAL,
    'NONE': DEFAULT_UNKNOWN_CATEGORICAL, None: DEFAULT_UNKNOWN_CATEGORICAL
}
CUSTOMER_STATUS_MAP = { 
    'ACTIVE': 'ACTIVE', 'INACTIVE': 'INACTIVE', 'PENDING': 'PENDING',
    'SUSPENDED': 'SUSPENDED', '': DEFAULT_STATUS_UNKNOWN, ' ': DEFAULT_STATUS_UNKNOWN,
    'NONE': DEFAULT_STATUS_UNKNOWN, None: DEFAULT_STATUS_UNKNOWN
}
PAYMENT_STATUS_MAP = { 
    'COMPLETED': 'COMPLETED', 'PENDING': 'PENDING', 'FAILED': 'FAILED', 'PAID': 'COMPLETED',
    'UNPAID': 'PENDING', '': DEFAULT_STATUS_UNKNOWN, None: DEFAULT_STATUS_UNKNOWN
}
ORDER_DELIVERY_STATUS_MAP = { 
    'DELIVERED': 'DELIVERED', 'PENDING': 'PENDING', 'IN_TRANSIT': 'IN_TRANSIT',
    'PROCESSING': 'PROCESSING', 'SHIPPED': 'SHIPPED', 'CANCELLED': 'CANCELLED',
    'RETURNED': 'RETURNED', '': DEFAULT_STATUS_UNKNOWN, ' ': DEFAULT_STATUS_UNKNOWN,
    'NONE': DEFAULT_STATUS_UNKNOWN, None: DEFAULT_STATUS_UNKNOWN
}
STATE_ABBREVIATION_MAP = { 
    'CALIFORNIA': 'CA', 'NEW YORK': 'NY', 'ILLINOIS': 'IL', 'TEXAS': 'TX',
    'PENNSYLVANIA': 'PA', 'ARIZONA': 'AZ', 'FLORIDA': 'FL', 'GEORGIA': 'GA',
    'CA': 'CA', 'NY': 'NY', 'IL': 'IL', 'TX': 'TX', 'PA': 'PA', 'AZ': 'AZ', 'FL': 'FL', 'GA': 'GA'
}
CITY_NORMALIZATION_MAP = { 
    'LA': 'Los Angeles', 'LOSANGELES': 'Los Angeles', 'LOS ANGELES': 'Los Angeles',
    'NYC': 'New York', 'NEW YORK CITY': 'New York', 'NEW_YORK': 'New York', 'NEW YORK': 'New York',
    'PHILA': 'Philadelphia', 'PHILADELPHIA': 'Philadelphia',
    'CHICAGO': 'Chicago', 'CHGO': 'Chicago',
    'PHOENIX': 'Phoenix', 'HOUSTON': 'Houston'
}

KNOWN_FILE_SOURCES_METADATA = {
    CUSTOMERS_MESSY_JSON_ORIG_NAME: {'entity': 'customer', 'type': 'json', 'parser_func': 'read_json'},
    PRODUCTS_INCONSISTENT_JSON_ORIG_NAME: {'entity': 'product', 'type': 'json', 'parser_func': 'read_json'},
    ORDERS_UNSTRUCTURED_CSV_ORIG_NAME: {'entity': 'order_items_unstructured', 'type': 'csv', 'parser_func': 'read_csv'},
    RECONCILIATION_DATA_CSV_ORIG_NAME: {'entity': 'order_items_reconciliation', 'type': 'csv', 'parser_func': 'read_csv'},
}

# --- Expected Raw Column Variants for Pre-flight Schema Checks (NEW) ---
# Use lowercase for case-insensitive checking.
EXPECTED_RAW_COLS_CUSTOMER = {
    'ids': ['cust_id', 'customer_id', 'customerid', 'client_id', 'id', 'user_id', 'user id', 'identifier'],
    'names': ['customer_name', 'full_name', 'name', 'fullname', 'user_name', 'username', 'clientname'],
    'emails': ['email', 'email_address', 'e-mail', 'emailaddress', 'user_email', 'contact_email'],
    'phones': ['phone', 'phone_number', 'contact_number', 'phonenumber', 'mobile', 'tel'],
    'addresses': ['address', 'street_address', 'address1'],
    'cities': ['city', 'town'],
    'states': ['state', 'province', 'region'],
    'postalcodes': ['postal_code', 'zip_code', 'zip', 'postcode']
}
EXPECTED_RAW_COLS_PRODUCT = {
    'ids': ['product_id', 'productid', 'item_id', 'itemid', 'sku', 'product_code', 'item_code', 'id'],
    'names': ['product_name', 'item_name', 'name', 'title', 'productname', 'prd_name'],
    'categories': ['category', 'product_category', 'type', 'producttype', 'genre'],
    'prices': ['price', 'unit_price', 'sale_price', 'list_price', 'prd_price'],
    'costs': ['cost', 'unit_cost', 'purchase_price'],
    'descriptions': ['description', 'desc', 'product_description', 'details']
}
EXPECTED_RAW_COLS_ORDER = { # For Order Items or Order Header files
    'order_ids': ['order_id', 'orderid', 'ord_id', 'transaction_ref', 'transaction_id', 'invoice_id', 'ref_num'],
    'item_ids': ['product_id', 'item_id', 'item_reference', 'sku', 'productid', 'itemid', 'prd_id'],
    'customer_ids': ['customer_id', 'cust_id', 'client_id', 'client_reference', 'customerid', 'user_id'],
    'quantities': ['quantity', 'qty', 'quantity_ordered', 'num_items', 'units'],
    'dates': ['order_date', 'transaction_date', 'date', 'created_at', 'order_datetime', 'purchase_date'],
    'line_totals': ['total_amount', 'line_total', 'line_item_total_value', 'subtotal', 'amount']
}

# Gemini API Key
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if COOKIE_KEY == "your_strong_random_cookie_key_CHANGE_ME":
    logger.warning("CRITICAL: Default COOKIE_KEY is in use in src/config.py. Please generate and set a strong, random key.")
    logger.warning("You can generate one using Python: import secrets; print(secrets.token_hex(32))")

logger.info("Configuration loaded from src/config.py, including expected raw column variants.")